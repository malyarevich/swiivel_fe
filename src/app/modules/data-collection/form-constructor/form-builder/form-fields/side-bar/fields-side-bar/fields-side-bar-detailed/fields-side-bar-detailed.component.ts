import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { v4 as uuid } from 'uuid';
import { cloneDeep } from 'lodash';
import { crumbs } from '../index';
import { Field } from 'src/app/models/data-collection/field.model';
import { SideBarService } from '../../side-bar.service';
import { FieldsService } from 'src/app/modules/data-collection/services/fields.service';

@Component({
  selector: 'app-fields-side-bar-detailed',
  templateUrl: './fields-side-bar-detailed.component.html',
  styleUrls: ['./fields-side-bar-detailed.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})

export class FieldsSideBarDetailedComponent implements OnInit,  OnDestroy {

  @Input() searchText: string;
  fieldsAddGroup: FormGroup = new FormGroup({
    fieldsName: new FormControl('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(3),
        Validators.maxLength(50)
      ])
    }),
    fieldType: new FormControl(null, Validators.required),
    fieldRole: new FormControl(null, Validators.required)
  });

  @Input() idSectionForDragDrop: string[];

  @Input() section: Field;
  @Input() form: Field[];

  nestedLevel = 0;
  showNested = true;

  // TODO:remake static "crumps" to autogenerated
  crumbs = crumbs;
  roleList: string[];
  customFields: Field[];

  constructor(
    private sideBarService: SideBarService,
    private modalService: NgbModal,
    private fb: FormBuilder,
    private fieldService: FieldsService
  ) {}

  ngOnInit() {
    this.initFormFieldsToSideBar([this.section], this.form);
    this.getRoleList();
    this.loadBasicFields();
  }

  onSectionToggle(event) {
    const value = event.target.checked;
    this.sideBarService.changeExistGroupFields(this.section, value);
    const index = this.form.findIndex((form: Field) => form.name === this.section.name);
    if (index > -1) {
      this.form.splice(index, 1);
    } else {
      this.form.push(this.sideBarService.getForm(this.section));
    }
  }

  onFieldToggle() {
    this.section.exist = this.section.fields.some((field: Field) => field.exist);
    const index = this.form.findIndex((form: Field) => form.name === this.section.name);
    if (this.section.exist) {
      if (index > -1) {
        this.form[index] = this.sideBarService.getForm(this.section);
      } else {
        this.form.push(this.sideBarService.getForm(this.section));
      }
    } else {
      this.form.splice(index, 1);
    }
  }

  returnToTree() {
    this.sideBarService.sectionSubject.next({});
  }

  initFormFieldsToSideBar(sideBar: Field[], workArea: Field[]) {
    sideBar.forEach(sideBarField => {
      workArea.forEach(field => {
        if (sideBarField.name === field.name) {
          sideBarField.exist = true;
          if (field.type === 113 || field.type === 114) {
            this.initFormFieldsToSideBar(sideBarField.fields, field.fields);
          }
        }
      });
    });
  }

  getRoleList() {
    this.fieldService.getRoleList().subscribe((rolelist: string[]) => this.roleList = rolelist);
  }

  loadBasicFields() {
    this.fieldService.getCustomList().subscribe((fields: Field[]) => {
      this.customFields = fields.filter(field => {
        if (field.type === 113 || field.type === 114) {
          return false;
        }
        return true;
      });
    });
  }

  openModal(content) {
    this.modalService
      .open(content, { size: 'lg', ariaLabelledBy: 'modal-basic-title' })
      .result.then(
        result => {},
        reason => {
          console.log(reason);
        }
      );
  }

  addField(modal) {
    this.validateAllFormFields(this.fieldsAddGroup);
    if (!this.fieldsAddGroup.valid) {
      return;
    }
    this.fieldsAddGroup.clearValidators();
    const newField: Field = cloneDeep(
      this.customFields.find(
        field => field.name === this.fieldsAddGroup.value.fieldType
      )
    );
    newField.name = this.fieldsAddGroup.value.fieldsName;
    newField._id = uuid();
    newField.prefix = this.fieldsAddGroup.value.fieldRole;
    this.section.fields.push(newField);
    this.fieldsAddGroup.reset();
    modal.close();
  }

  modalClose(modal) {
    this.fieldsAddGroup.reset();
    modal.close();
  }

  validateAllFormFields(formGroup: FormGroup) {
    Object.keys(formGroup.controls).forEach(field => {
      const control = formGroup.get(field);
      if (control instanceof FormControl) {
        control.markAsTouched({ onlySelf: true });
      } else if (control instanceof FormGroup) {
        control.markAsTouched({ onlySelf: true });
        this.validateAllFormFields(control);
      }
    });
  }

  ngOnDestroy(): void {
    this.sideBarService.sectionSubject.next({});
  }

}
